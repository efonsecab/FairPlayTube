<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">FairPlayTube.SystemConfigurator</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="ServerConfiguration/AzureAdB2C">
                <span class="oi oi-plus" aria-hidden="true"></span> Server Configuration
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <button type="button" @onclick="GenerateServerConfigurationFile">Generate Server Files</button>
        </li>
        <li class="nav-item px-3">
            <button type="button" @onclick="GenerateClientConfigurationFile">Generate Client File</button>
        </li>
    </ul>
</div>

@code {
    [Inject]
    private ServerConfiguration ServerConfiguration { get; set; }
    [Inject]
    private ClientAppConfiguration ClientAppConfiguration { get; set; }
    [Inject]
    private IJSRuntime JSRuntime { get; set; }
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task GenerateServerConfigurationFile()
    {
        var serverConfigurationJson = System.Text.Json.JsonSerializer.Serialize(ServerConfiguration);
        var fileBytes = System.Text.Encoding.UTF8.GetBytes(serverConfigurationJson);
        await JSRuntime.InvokeVoidAsync(
              "downloadFromByteArray",
              new
              {
                  ByteArray = fileBytes,
                  FileName = "FairPlayTube.Server.appsettigs.json",
                  ContentType = System.Net.Mime.MediaTypeNames.Application.Octet
              });
    }

    private async Task GenerateClientConfigurationFile()
    {
        var serverConfigurationJson = System.Text.Json.JsonSerializer.Serialize(ClientAppConfiguration);
        var fileBytes = System.Text.Encoding.UTF8.GetBytes(serverConfigurationJson);
        await JSRuntime.InvokeVoidAsync(
              "downloadFromByteArray",
              new
              {
                  ByteArray = fileBytes,
                  FileName = "FairPlayTube.Client.appsettigs.json",
                  ContentType = System.Net.Mime.MediaTypeNames.Application.Octet
              });
    }
}

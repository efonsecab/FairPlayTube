<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FairPlayTube.Controllers</name>
    </assembly>
    <members>
        <member name="T:FairPlayTube.Controllers.AzureVideoIndexerController">
            <summary>
            Enabled the callback to be invoked from Azure Video Indexer
            </summary>
        </member>
        <member name="M:FairPlayTube.Controllers.AzureVideoIndexerController.#ctor(FairPlayTube.DataAccess.Data.FairplaytubeDatabaseContext,FairPlayTube.Services.VideoService,Microsoft.AspNetCore.SignalR.IHubContext{FairPlayTube.Notifications.Hubs.NotificationHub,FairPlayTube.Notifications.Hubs.INotificationHub})">
            <summary>
            Initializes <see cref="T:FairPlayTube.Controllers.AzureVideoIndexerController"/>
            </summary>
            <param name="fairplaytubeDatabaseContext"></param>
            <param name="videoService"></param>
            <param name="hubContext"></param>
        </member>
        <member name="M:FairPlayTube.Controllers.AzureVideoIndexerController.OnVideoIndexed(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Invoked by Azure Video Indexer when a video has been indxed
            </summary>
            <param name="id"></param>
            <param name="state"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:FairPlayTube.Controllers.FilesaveController">
            <summary>
            In charge to saving files
            </summary>
        </member>
        <member name="M:FairPlayTube.Controllers.FilesaveController.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Logging.ILogger{FairPlayTube.Controllers.FilesaveController},PTI.Microservices.Library.Services.AzureBlobStorageService,FairPlayTube.Common.Configuration.DataStorageConfiguration,FairPlayTube.Common.Interfaces.ICurrentUserProvider)">
            <summary>
            Initializes <see cref="T:FairPlayTube.Controllers.FilesaveController"/>
            </summary>
            <param name="env"></param>
            <param name="logger"></param>
            <param name="azureBlobStorageService"></param>
            <param name="dataStorageConfiguration"></param>
            <param name="currentUserProvider"></param>
        </member>
        <member name="M:FairPlayTube.Controllers.FilesaveController.PostFile(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Http.IFormFile},System.Threading.CancellationToken)">
            <summary>
            Upload a file
            </summary>
            <param name="files"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:FairPlayTube.Controllers.OpenGraphController">
            <summary>
            Handles all of the Open Graph routes
            </summary>
        </member>
        <member name="M:FairPlayTube.Controllers.OpenGraphController.#ctor(FairPlayTube.DataAccess.Data.FairplaytubeDatabaseContext,PTI.Microservices.Library.Interceptors.CustomHttpClient)">
            <summary>
            Initializes <see cref="T:FairPlayTube.Controllers.OpenGraphController"/>
            </summary>
            <param name="fairplaytubeDatabaseContext"></param>
            <param name="customHttpClient"></param>
        </member>
        <member name="M:FairPlayTube.Controllers.OpenGraphController.VideoThumbnail(System.String)">
            <summary>
            Retrieves the thumbnail image for the specified videoid
            </summary>
            <param name="videoId"></param>
            <returns></returns>
        </member>
        <member name="T:FairPlayTube.Controllers.SearchController">
            <summary>
            Handles all of the search functionality
            </summary>
        </member>
        <member name="M:FairPlayTube.Controllers.SearchController.#ctor(FairPlayTube.DataAccess.Data.FairplaytubeDatabaseContext,FairPlayTube.Services.SearchService,AutoMapper.IMapper)">
            <summary>
            Initializes <see cref="T:FairPlayTube.Controllers.SearchController"/>
            </summary>
            <param name="fairplaytubeDatabaseContext"></param>
            <param name="searchService"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:FairPlayTube.Controllers.SearchController.SearchPublicProcessedVideos(System.String,System.Threading.CancellationToken)">
            <summary>
            Searches for public processed videos having the given searchTerm
            </summary>
            <param name="searchTerm"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:FairPlayTube.Controllers.SitemapController">
            <summary>
            Dynamically generates a sitemap
            </summary>
        </member>
        <member name="M:FairPlayTube.Controllers.SitemapController.#ctor(FairPlayTube.DataAccess.Data.FairplaytubeDatabaseContext)">
            <summary>
            Initializes <see cref="T:FairPlayTube.Controllers.SitemapController"/>
            </summary>
            <param name="fairplaytubeDatabaseContext"></param>
        </member>
        <member name="M:FairPlayTube.Controllers.SitemapController.Sitemap">
            <summary>
            Generates a sitemap
            </summary>
            <returns></returns>
        </member>
        <member name="T:FairPlayTube.Controllers.UserController">
            <summary>
            Handles all of the data regarding a User
            </summary>
        </member>
        <member name="M:FairPlayTube.Controllers.UserController.#ctor(FairPlayTube.DataAccess.Data.FairplaytubeDatabaseContext,FairPlayTube.Common.Interfaces.ICurrentUserProvider,FairPlayTube.Services.EmailService,FairPlayTube.Services.MessageService,FairPlayTube.Services.UserService)">
            <summary>
            Initializes <see cref="T:FairPlayTube.Controllers.UserController"/>
            </summary>
            <param name="fairplaytubeDatabaseContext"></param>
            <param name="currentUserProvider"></param>
            <param name="emailService"></param>
            <param name="messageService"></param>
            <param name="userService"></param>
        </member>
        <member name="M:FairPlayTube.Controllers.UserController.GetMyRole(System.Threading.CancellationToken)">
            <summary>
            Gets the name of the role assigned to the Logged In User
            </summary>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.UserController.ListUsers(System.Threading.CancellationToken)">
            <summary>
            List the users in the system
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.UserController.InviteUser(FairPlayTube.Models.Invites.InviteUserModel,System.Threading.CancellationToken)">
            <summary>
            Invites a user to use the system
            </summary>
            <param name="inviteUserModel"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.UserController.SendMessage(FairPlayTube.Models.UserMessage.UserMessageModel,System.Threading.CancellationToken)">
            <summary>
            Sends a message to the specified user
            </summary>
            <param name="model"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.UserController.AddUserFollower(System.String,System.Threading.CancellationToken)">
            <summary>
            Adds a new user followed by the logged in user
            </summary>
            <param name="followedApplicationUserId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.UserController.GetMyUserStatus(System.Threading.CancellationToken)">
            <summary>
            Gets a user status
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.UserController.ValidateUserInviteCode(System.String)">
            <summary>
            Validates a user invite code
            </summary>
            <param name="userInviteCode"></param>
            <returns></returns>
        </member>
        <member name="T:FairPlayTube.Controllers.UserProfileController">
            <summary>
            Handles all the data regarind a USer's Profile
            </summary>
        </member>
        <member name="M:FairPlayTube.Controllers.UserProfileController.#ctor(FairPlayTube.DataAccess.Data.FairplaytubeDatabaseContext,FairPlayTube.Common.Interfaces.ICurrentUserProvider,FairPlayTube.Services.PaymentService)">
            <summary>
            Initializes <see cref="T:FairPlayTube.Controllers.UserProfileController"/>
            </summary>
            <param name="fairplaytubeDatabaseContext"></param>
            <param name="currentUserProvider"></param>
            <param name="paymentService"></param>
        </member>
        <member name="M:FairPlayTube.Controllers.UserProfileController.SaveMonetization(FairPlayTube.Models.UserProfile.GlobalMonetizationModel,System.Threading.CancellationToken)">
            <summary>
            Saves the Monetization Profile
            </summary>
            <param name="globalMonetizationModel"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.UserProfileController.GetMyMonetizationInfo(System.Threading.CancellationToken)">
            <summary>
            Gets the Logged In User Monetization Profile
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.UserProfileController.AddFunds(System.String,System.Threading.CancellationToken)">
            <summary>
            Verifies if the Paypal order id is valid, and adds fund to the user's system wallet
            </summary>
            <param name="orderId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.UserProfileController.GetMyFunds(System.Threading.CancellationToken)">
            <summary>
            Gets the available funds for the Logged In user
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:FairPlayTube.Controllers.VideoController">
            <summary>
            Handles all of the data related to a video
            </summary>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.#ctor(FairPlayTube.Services.VideoService,AutoMapper.IMapper,FairPlayTube.Common.Interfaces.ICurrentUserProvider)">
            <summary>
            Initializes <see cref="T:FairPlayTube.Controllers.VideoController"/>
            </summary>
            <param name="videoService"></param>
            <param name="mapper"></param>
            <param name="currentUserProvider"></param>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.DeleteVideo(System.String,System.Threading.CancellationToken)">
            <summary>
            Allows to delete a video
            </summary>
            <param name="videoId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.GetPublicProcessedVideos(System.Threading.CancellationToken)">
            <summary>
            Gets all of the public processed videos
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.GetBoughtVideosIds(System.Threading.CancellationToken)">
            <summary>
            Gets all of the videosids for the bought videos
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.SearchVideosByPersonName(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets videos by person
            </summary>
            <param name="personName"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.UploadVideo(FairPlayTube.Models.Video.UploadVideoModel,System.Threading.CancellationToken)">
            <summary>
            Uploads a video 
            </summary>
            <param name="uploadVideoModel"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.GetMyProcessedVideos(System.Threading.CancellationToken)">
            <summary>
            Gets the Logged In user processed videos
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.GetVideoEditAccessToken(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a given video access token to enable edit mode in the insights widget
            </summary>
            <param name="videoId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.ListAllKeywords(System.Threading.CancellationToken)">
            <summary>
            List all keywords found on the processed videos
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.ListVideosByKeyword(System.String,System.Threading.CancellationToken)">
            <summary>
            Lists all the videos having a given keyword
            </summary>
            <param name="keyword"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.UpdateMyVideo(System.String,FairPlayTube.Models.Video.UpdateVideoModel,System.Threading.CancellationToken)">
            <summary>
            Updates a video
            </summary>
            <param name="videoId"></param>
            <param name="model"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.GetVideo(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the information for a given video
            </summary>
            <param name="videoId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.BuyVideoAccess(System.String,System.Threading.CancellationToken)">
            <summary>
            Buys access to a given video
            </summary>
            <param name="videoId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.GetMyPendingVideosQueue(System.Threading.CancellationToken)">
            <summary>
            Gets the status of the logged in user queued videos
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.AddVideoJob(FairPlayTube.Models.Video.VideoJobModel,System.Threading.CancellationToken)">
            <summary>
            Adds a job associatd to a given video
            </summary>
            <param name="videoJobModel"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.GetPersons(System.Threading.CancellationToken)">
            <summary>
            Gets the persons found in the videos
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.AnalyzeVideoComment(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Analyzes given video's comment to generate additional insights
            </summary>
            <param name="videoCommentId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.CreateCustomRenderingProject(FairPlayTube.Models.Video.ProjectModel,System.Threading.CancellationToken)">
            <summary>
            Creates a new custom rendering project
            </summary>
            <param name="projectModel"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoController.DownloadVideo(System.String,System.Threading.CancellationToken)">
            <summary>
            Download the source file for the specified video id
            </summary>
            <param name="videoId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:FairPlayTube.Controllers.VideoPlaylistController">
            <summary>
            Handles actions related to videos playlists
            </summary>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoPlaylistController.#ctor(FairPlayTube.Services.VideoPlaylistService)">
            <summary>
            Initializes <see cref="P:FairPlayTube.Controllers.VideoPlaylistController.VideoPlaylistService"/>
            </summary>
            <param name="videoPlaylistService"></param>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoPlaylistController.CreateVideoPlaylist(FairPlayTube.Models.Video.VideoPlaylistModel,System.Threading.CancellationToken)">
            <summary>
            Creates a new playlist owned by the logged in user
            </summary>
            <param name="videoPlaylistModel"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:FairPlayTube.Controllers.VideoPlaylistController.DeleteVideoPlaylist(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Deletes the videoplaylist with the specified id
            </summary>
            <param name="videoPlaylistId"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:FairPlayTube.Controllers.VisitorTrackingController">
            <summary>
            Used to persis a visitor informaation
            </summary>
        </member>
        <member name="M:FairPlayTube.Controllers.VisitorTrackingController.#ctor(FairPlayTube.Services.VisitorTrackingService)">
            <summary>
            Initialized <see cref="T:FairPlayTube.Controllers.VisitorTrackingController"/>
            </summary>
            <param name="visitorTrackingService"></param>
        </member>
        <member name="M:FairPlayTube.Controllers.VisitorTrackingController.TrackClientInformation(FairPlayTube.Models.VisitorTracking.VisitorTrackingModel)">
            <summary>
            Persists the visitors information and visited page
            </summary>
            <param name="visitorTrackingModel"></param>
            <returns></returns>
        </member>
    </members>
</doc>

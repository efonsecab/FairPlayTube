@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<AuthorizeView>
    <Authorized>
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-person-circle"></i>
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                <li>
                    <label class="form-label">
                        <strong>
                            @context.User.Identity.Name
                        </strong>
                    </label>
                </li>
                <li>
                    <button class="btn btn-info form-control" @onclick="BeginLogout">
                        <i class="bi bi-person-circle"></i>
                        @Localizer[LogoutTextKey]
                    </button>
                </li>
            </ul>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-person-circle"></i>
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                <li>
                    <button class="btn btn-info form-control" @onclick="Login">
                        <i class="bi bi-person-circle"></i>
                        @Localizer[SignInTextKey]/@Localizer[SignUpTextKey]
                    </button>
                </li>
            </ul>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; }
    [Inject]
    private IStringLocalizer<LoginDisplay> Localizer { get; set; }
    private async Task BeginLogout(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

    private void Login()
    {
        this.NavigationManager.NavigateTo("authentication/login");
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Sign In")]
    public const string SignInTextKey = "SignInText";
    [ResourceKey(defaultValue: "Sign Up")]
    public const string SignUpTextKey = "SignUpText";
    [ResourceKey(defaultValue: "Logout")]
    public const string LogoutTextKey = "LogoutText";
    #endregion Resource Keys
}